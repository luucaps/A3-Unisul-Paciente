
package View;

import Control.PacienteControl;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class TabelaPacientes extends javax.swing.JFrame {
private PacienteControl controlador;//cria vinculo com o controlador
    public TabelaPacientes() {
        initComponents();
        this.controlador = new PacienteControl();//carrega o controlador de Paciente
        //chama-se a função para carregar a tabela automaticamente
        this.carregaTabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        TabelaPacientes = new javax.swing.JTable();
        b_cancelar = new javax.swing.JButton();
        b_apagar = new javax.swing.JButton();
        b_editar = new javax.swing.JButton();
        b_cadastrar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        c_nome = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        c_telefone = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        c_endereco = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        c_datanascimento = new javax.swing.JTextField();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pacientes");

        TabelaPacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Telefone", "Endereço", "Data de Nascimento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TabelaPacientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabelaPacientesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TabelaPacientes);

        b_cancelar.setText("Cancelar");
        b_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_cancelarActionPerformed(evt);
            }
        });

        b_apagar.setText("Apagar");
        b_apagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_apagarActionPerformed(evt);
            }
        });

        b_editar.setText("Editar");
        b_editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_editarActionPerformed(evt);
            }
        });

        b_cadastrar.setText("Cadastrar");
        b_cadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_cadastrarActionPerformed(evt);
            }
        });

        jLabel1.setText("Nome:");

        jLabel2.setText("Telefone:");

        jLabel3.setText("Endereço:");

        jLabel4.setText("Data de Nascimento:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(layout.createSequentialGroup()
                .addGap(208, 208, 208)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(c_datanascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(b_apagar)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(b_editar))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(c_endereco))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(c_telefone, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(c_nome, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(59, 332, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(b_cancelar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(b_cadastrar)
                .addGap(62, 62, 62))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(c_nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(c_telefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(c_endereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(c_datanascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_apagar)
                    .addComponent(b_editar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_cancelar)
                    .addComponent(b_cadastrar))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void b_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_cancelarActionPerformed
        //fecha a janela sem fechar o programa
        this.setVisible(false);
    }//GEN-LAST:event_b_cancelarActionPerformed

    private void b_cadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_cadastrarActionPerformed
        CadastroPaciente paciente = new CadastroPaciente();
        paciente.setVisible(true);
    }//GEN-LAST:event_b_cadastrarActionPerformed

    private void TabelaPacientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabelaPacientesMouseClicked
        //primeiro faz uma validação para que tenha alguma linha selecionada.
        //getSelectedRow procura qual q é o ID da linha selecionada da jtable, e tem q ser diferente de -1.
        if(this.TabelaPacientes.getSelectedRow() != -1){
            //cria-se as variaveis, chama a JTable (TabelaPacientes) e chama o comando getValueAt que chama o valor local.
            //chama o getSelectedRow e pega o campo informado e o toString transforma em texto.
            String nome = this.TabelaPacientes.getValueAt(this.TabelaPacientes.getSelectedRow(), 1).toString();
            String telefone = this.TabelaPacientes.getValueAt(this.TabelaPacientes.getSelectedRow(), 2).toString();
            String endereco = this.TabelaPacientes.getValueAt(this.TabelaPacientes.getSelectedRow(), 3).toString();
            String data_nasc = this.TabelaPacientes.getValueAt(this.TabelaPacientes.getSelectedRow(), 4).toString();
            
            //o setText captura as informações e coloca direto nos campos.
            this.c_nome.setText(nome);
            this.c_telefone.setText(telefone);
            this.c_endereco.setText(endereco);
            this.c_datanascimento.setText(data_nasc);
        }
    }//GEN-LAST:event_TabelaPacientesMouseClicked

    private void b_editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_editarActionPerformed
        // *TRATAMENTOS DE ERROS*
        try{
            //recebendo e validando os dados da interface grafica
            int id = 0;
            String nome = "";
            String telefone = "";
            String endereco = "";
            String data_nasc = "";
            //getSelectedRow verifica se alguem foi selecionado, sendo diferente de -1.
            if(this.TabelaPacientes.getSelectedRow() == -1){
                throw new Mensagens("Selecione um paciente para editar.");
            }else{
                //chama a jtable e o comando getValueAt que chama o valor do local.
                //getSelectedRow chama o campo informado e o toString transforma em texto.
                //ele seleciona o campo 0 que é o ID.
                id = Integer.parseInt(this.TabelaPacientes.getValueAt(this.TabelaPacientes.getSelectedRow(), 0).toString());
            }
            if(this.c_nome.getText().length() < 2){
                throw new Mensagens("O nome deve conter ao menos 2 caracteres.");
            }else{
                nome = this.c_nome.getText();
            }
            if(this.c_telefone.getText().length() < 10){
                throw new Mensagens("O número de telefone deve conter ao menos 10 caracteres.");
            }else{
                telefone = this.c_telefone.getText();
            }
            if(this.c_endereco.getText().length() < 5){
                throw new Mensagens("O endereço deve conter ao menos 5 caracteres.");
            }else{
                endereco = this.c_endereco.getText();
            }
            if(this.c_datanascimento.getText().length() < 6){
                throw new Mensagens("A data de nascimento deve conter ao menos 6 caracteres.");
            }else{
                data_nasc = this.c_datanascimento.getText();
            }
//            if(this.TabelaPacientes.getSelectedRow() == -1){
//                throw new Mensagens("Selecione um paciente para editar.");
//            }else{
//                id = Integer.parseInt(this.TabelaPacientes.getValueAt(this.TabelaPacientes.getSelectedRow(), 0).toString());
//            }
            //envia os dados para o controlador processar
            if(this.controlador.Editar(endereco, data_nasc, id, nome, telefone)){
                //limpa os campos
                this.c_nome.setText("");
                this.c_telefone.setText("");
                this.c_endereco.setText("");
                this.c_datanascimento.setText("");
                JOptionPane.showMessageDialog(rootPane, "Paciente alterado com sucesso!");
            }
            
            //Catch é executado para tentar corrigir o erro ou apenas capturá-lo
        }catch(Mensagens erro){
            JOptionPane.showMessageDialog(null, erro.getMessage());
        }finally{
            carregaTabela(); //atualiza a tabela.
        }
    }//GEN-LAST:event_b_editarActionPerformed

    private void b_apagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_apagarActionPerformed
        try{
            int id = 0;
            if(this.TabelaPacientes.getSelectedRow() == -1){
                //throw desvia o erro para Mensagens (para mostrar uma mensagem na tela).
                //verifica-se se tem uma linha selecionada.
                throw new Mensagens("Selecione um paciente para apagar");
            }else{
                id = Integer.parseInt(this.TabelaPacientes.getValueAt(this.TabelaPacientes.getSelectedRow(), 0).toString());
            }
            //showConfirmDialog mostra uma mensagem de SIM ou NAO
            int resposta = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja apagar este paciente?");
            if(resposta == 0){ //clicou em SIM
                //envia dados para controlador
                if(this.controlador.Apagar(id)){
                    //limpa os campos
                    this.c_nome.setText("");
                    this.c_telefone.setText("");
                    this.c_endereco.setText("");
                    this.c_datanascimento.setText("");
                    JOptionPane.showMessageDialog(rootPane, "Paciente apagado com sucesso!");
                }
            }
        }catch(Mensagens erro){
            JOptionPane.showMessageDialog(null, erro.getMessage());
        }finally{
            carregaTabela(); //atualiza a tabela.
        }
    }//GEN-LAST:event_b_apagarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TabelaPacientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TabelaPacientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TabelaPacientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TabelaPacientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TabelaPacientes().setVisible(true);
            }
        });
    }
    @SuppressWarnings("unchecked")
    public void carregaTabela(){
        //chama o nome da Jtable e da um getModel.
        //cria um modelo de dados (defaulttablemodel).
        DefaultTableModel listao = (DefaultTableModel)this.TabelaPacientes.getModel();
        //listao = variavel de manipulação.
        //setNumRows = não importa quantas linhas tem nessa tabela, eu quero que zere (zera a tabela)
        listao.setNumRows(0);
        
        String linhasTabela[][] = controlador.getMatrizTabela();//getMatriztabela em PacienteControl
        //vai da linha 0 ate o tamanha desta matriz (varredura)
        for(int i = 0; i < linhasTabela.length; i++){
            //addRow coloca-se um new Object e coloca todas as linhas da matriz (para add objeto)
            listao.addRow(new Object[]{
            linhasTabela[i][0],
            linhasTabela[i][1],
            linhasTabela[i][2],
            linhasTabela[i][3],
            linhasTabela[i][4]
        });
        }
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TabelaPacientes;
    private javax.swing.JButton b_apagar;
    private javax.swing.JButton b_cadastrar;
    private javax.swing.JButton b_cancelar;
    private javax.swing.JButton b_editar;
    private javax.swing.JTextField c_datanascimento;
    private javax.swing.JTextField c_endereco;
    private javax.swing.JTextField c_nome;
    private javax.swing.JTextField c_telefone;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
